{"version":3,"file":"contentLoader-B0hQA329.js","sources":["../../src/utils/modules/contentLoader-core.js","../../src/utils/modules/contentLoader-shared.js","../../src/utils/modules/contentLoader-about.js","../../src/utils/modules/contentLoader-services.js","../../src/utils/modules/contentLoader-investments.js","../../src/utils/modules/contentLoader-solutions.js","../../src/utils/contentLoader.js"],"sourcesContent":["// src/utils/modules/contentLoader-core.js\n// Core functionality for content loading - shared by all pages\n\nexport class ContentLoaderCore {\n    constructor() {\n        this.cache = new Map();\n    }\n\n    /**\n     * Load and parse markdown content\n     * @param {string} contentName - Name of the content file (without .md extension)\n     * @returns {Promise<Object>} Parsed content with frontmatter and HTML\n     */\n    async loadContent(contentName) {\n        // Note: Caching is now handled at the main ContentLoader level\n        try {\n            console.log(`🔄 Starting to load content: ${contentName}`);\n            \n            // Fetch the markdown file as text\n            const fetchUrl = `/src/content/${contentName}.md`;\n            console.log(`📡 Fetching from URL: ${fetchUrl}`);\n            \n            const response = await fetch(fetchUrl);\n            console.log(`📡 Fetch response:`, {\n                ok: response.ok,\n                status: response.status,\n                statusText: response.statusText,\n                url: response.url,\n                headers: Object.fromEntries(response.headers.entries())\n            });\n            \n            if (!response.ok) {\n                console.error(`❌ Fetch failed with status ${response.status}: ${response.statusText}`);\n                throw new Error(`Failed to fetch ${contentName}.md: ${response.status} ${response.statusText}`);\n            }\n            \n            const markdownText = await response.text();\n            console.log(`📄 Raw markdown loaded:`, {\n                length: markdownText.length,\n                preview: markdownText.substring(0, 300) + '...',\n                firstLine: markdownText.split('\\n')[0]\n            });\n            \n            // Parse frontmatter and content\n            console.log(`⚙️ Parsing markdown content...`);\n            const parsed = this.parseMarkdown(markdownText);\n            console.log(`✅ Parsed content:`, {\n                frontmatter: parsed.frontmatter,\n                rawContentLength: parsed.rawContent?.length || 0\n            });\n\n            // Don't cache here - let the main ContentLoader handle caching after full parsing\n            console.log(`✅ Basic parsing complete for: ${contentName}`);\n            \n            return parsed;\n        } catch (error) {\n            console.error(`❌ Failed to load content: ${contentName}`, {\n                message: error.message,\n                stack: error.stack,\n                name: error.name\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Parse markdown text into frontmatter and HTML\n     * @param {string} markdownText - Raw markdown text\n     * @returns {Object} Parsed content with sections\n     */\n    parseMarkdown(markdownText) {\n        console.log('🔍 Raw markdown input:', markdownText.substring(0, 100));\n        \n        // Split frontmatter and content - handle various frontmatter formats\n        const frontmatterRegex = /^---\\s*\\n([\\s\\S]*?)\\n-+\\s*\\n([\\s\\S]*)$/;\n        const match = markdownText.match(frontmatterRegex);\n        \n        let frontmatter = {};\n        let content = markdownText;\n        \n        if (match) {\n            console.log('✅ Frontmatter match found');\n            const frontmatterText = match[1];\n            content = match[2];\n            console.log('📋 Frontmatter text:', frontmatterText);\n            console.log('📄 Content after frontmatter:', content.substring(0, 100));\n            \n            // Parse frontmatter (improved YAML parsing)\n            frontmatter = this.parseFrontmatter(frontmatterText);\n        } else {\n            console.log('❌ No frontmatter match found');\n            // Try alternative patterns\n            const altRegex = /^---\\s*\\n([\\s\\S]*?)\\n---\\s*\\n([\\s\\S]*)$/;\n            const altMatch = markdownText.match(altRegex);\n            if (altMatch) {\n                console.log('✅ Alternative frontmatter pattern matched');\n                frontmatter = this.parseFrontmatter(altMatch[1]);\n                content = altMatch[2];\n            }\n        }\n        \n        return {\n            frontmatter,\n            rawContent: content\n        };\n    }\n\n    /**\n     * Parse YAML frontmatter\n     * @param {string} frontmatterText - YAML content\n     * @returns {Object} Parsed frontmatter\n     */\n    parseFrontmatter(frontmatterText) {\n        const frontmatter = {};\n        const lines = frontmatterText.split('\\n');\n        \n        lines.forEach(line => {\n            line = line.trim();\n            if (line && !line.startsWith('#')) {\n                const colonIndex = line.indexOf(':');\n                if (colonIndex > 0) {\n                    const key = line.substring(0, colonIndex).trim();\n                    let value = line.substring(colonIndex + 1).trim();\n                    \n                    // Remove quotes and handle special characters\n                    value = value.replace(/^[\"']|[\"']$/g, '');\n                    \n                    frontmatter[key] = value;\n                }\n            }\n        });\n        \n        return frontmatter;\n    }\n\n    /**\n     * Enhanced markdown to HTML conversion\n     * @param {string} markdown - Markdown text\n     * @returns {string} HTML string\n     */\n    markdownToHtml(markdown) {\n        // Split content by double newlines to handle paragraphs and lists separately\n        const sections = markdown.trim().split(/\\n\\s*\\n/);\n        let html = '';\n        \n        sections.forEach(section => {\n            const trimmedSection = section.trim();\n            if (!trimmedSection) return;\n            \n            // Check if this section is a list (starts with -)\n            if (trimmedSection.includes('\\n-') || trimmedSection.startsWith('-')) {\n                // Handle lists with proper bullet styling\n                const listItems = trimmedSection\n                    .split('\\n')\n                    .filter(line => line.trim().startsWith('-'))\n                    .map(line => {\n                        const content = line.replace(/^-\\s*/, '').trim();\n                        return `<li><span class=\"custom-bullet\">▸</span>${content}</li>`;\n                    })\n                    .join('');\n                \n                if (listItems) {\n                    html += `<ul class=\"custom-list\">${listItems}</ul>`;\n                }\n            } else {\n                // Handle regular paragraphs and headers\n                let processedSection = trimmedSection\n                    // Headers\n                    .replace(/^#### (.*$)/gim, '<h4 class=\"text-lg font-bold text-primary mb-3 font-heading\">$1</h4>')\n                    .replace(/^### (.*$)/gim, '<h3 class=\"text-xl font-bold text-primary mb-4 font-heading\">$1</h3>')\n                    .replace(/^## (.*$)/gim, '<h2 class=\"text-2xl font-bold text-primary mb-6 font-heading\">$1</h2>')\n                    .replace(/^# (.*$)/gim, '<h1 class=\"text-3xl font-bold text-primary mb-6 font-heading\">$1</h1>')\n                    // Bold and italic\n                    .replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>')\n                    .replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n                \n                // Check if it's a header line\n                if (processedSection.includes('<h1>') || processedSection.includes('<h2>') || \n                    processedSection.includes('<h3>') || processedSection.includes('<h4>')) {\n                    html += processedSection;\n                } else {\n                    // Regular paragraph with prose styling for better typography\n                    html += `<p class=\"text-neutral-800 mb-4 font-body leading-relaxed text-lg\">${processedSection}</p>`;\n                }\n            }\n        });\n        \n        return html;\n    }\n\n    /**\n     * Apply Tailwind styling to content\n     * @param {string} htmlContent - HTML content\n     * @returns {string} Styled HTML\n     */\n    applyContentStyling(htmlContent) {\n        // Don't wrap in prose - our markdownToHtml already handles styling\n        return htmlContent;\n    }\n\n    /**\n     * Escape HTML to prevent XSS\n     * @param {string} text - Text to escape\n     * @returns {string} Escaped text\n     */\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    /**\n     * Render content to a container element\n     * @param {HTMLElement} container - Target container\n     * @param {string} htmlContent - HTML content to render\n     */\n    renderContent(container, htmlContent) {\n        if (!container) {\n            console.error('Container element not found');\n            return;\n        }\n        \n        container.innerHTML = htmlContent;\n    }\n\n    /**\n     * Show loading state\n     * @param {HTMLElement} container - Target container\n     */\n    showLoading(container) {\n        if (container) {\n            container.innerHTML = `\n                <div class=\"flex items-center justify-center py-12\">\n                    <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                    <span class=\"ml-3 text-neutral-600\">Loading content...</span>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Show error state\n     * @param {HTMLElement} container - Target container\n     * @param {string} message - Error message\n     */\n    showError(container, message = 'Failed to load content') {\n        if (container) {\n            container.innerHTML = `\n                <div class=\"text-center py-12\">\n                    <div class=\"text-red-600 mb-2\">\n                        <svg class=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z\"></path>\n                        </svg>\n                    </div>\n                    <p class=\"text-neutral-600\">${message}</p>\n                </div>\n            `;\n        }\n    }\n}","// src/utils/modules/contentLoader-shared.js\n// Shared content parsing functionality used by multiple pages\n// Contains parseContentSections method and its dependencies\n\nimport { ContentLoaderCore } from './contentLoader-core.js';\n\n/**\n * Shared content loading functionality for parsing content sections\n * Extends ContentLoaderCore to access base methods like markdownToHtml and escapeHtml\n */\nexport class ContentLoaderShared extends ContentLoaderCore {\n    /**\n     * Parse content into sections based on headings\n     * Extracted from original contentLoader.js (lines 150-250)\n     * @param {string} content - Markdown content\n     * @returns {Object} Organized sections\n     */\n    parseContentSections(content) {\n        console.log('📝 Parsing content sections from:', content.substring(0, 200));\n        \n        const sections = {\n            mainContent: '',\n            personnel: [],\n            services: [],\n            industries: [],\n            other: [],\n            // Special sections for services.md\n            servicesMainDescription: '',\n            coreValues: [],\n            serviceAreas: []\n        };\n        \n        // Check if this is services content by looking for specific markers\n        const isServicesContent = content.includes('### Forzak Will Do More for Your Business') ||\n                                 content.includes('### Core Values');\n        \n        if (isServicesContent) {\n            console.log('🛠️ Detected services content, using specialized parsing');\n            return this.parseServicesContent(content);\n        }\n        \n        // Split by ## headings\n        const sectionRegex = /^## (.+)$/gm;\n        const parts = content.split(sectionRegex);\n        \n        console.log('📂 Content split into', parts.length, 'parts');\n        parts.forEach((part, index) => {\n            console.log(`📄 Part ${index}:`, part.substring(0, 100));\n        });\n        \n        // First part is content before any ## heading\n        if (parts[0]) {\n            const mainContentText = parts[0].trim();\n            // Remove the main heading if it exists (# Financial Investments)\n            const cleanedContent = mainContentText.replace(/^#\\s+[^\\n]+\\n*/, '');\n            \n            // If there's no content after removing the main heading, use the first section as main content\n            if (!cleanedContent.trim() && parts.length > 2) {\n                console.log('📄 No intro content found, using first section as main content');\n                // Store the first section title\n                sections.firstSectionTitle = parts[1].trim();\n                // Use the first section's content as main content\n                sections.mainContent = this.markdownToHtml(parts[2].trim());\n                // Adjust the loop to skip the first section\n                sections.skipFirstSection = true;\n            } else {\n                sections.mainContent = this.markdownToHtml(cleanedContent);\n            }\n            console.log('📄 Main content set:', sections.mainContent.substring(0, 100));\n        }\n        \n        // Process sections\n        let startIndex = sections.skipFirstSection ? 3 : 1; // Start from 3 if we skip first section\n        \n        for (let i = startIndex; i < parts.length; i += 2) {\n            const heading = parts[i];\n            const sectionContent = parts[i + 1] || '';\n            \n            console.log(`🏷️ Processing section: \"${heading}\"`);\n            console.log(`📄 Section content preview:`, sectionContent.substring(0, 150));\n            \n            if (heading.toLowerCase().includes('personnel')) {\n                console.log('👥 Found personnel section!');\n                sections.personnel = this.parsePersonnel(sectionContent);\n            } else if (heading.toLowerCase().includes('services')) {\n                console.log('🛠️ Found services section!');\n                sections.services = this.parseServices(sectionContent);\n            } else {\n                // Check if this section contains the industries list\n                const hasIndustriesList = sectionContent.includes('### Industries we have invested in:');\n                \n                if (hasIndustriesList) {\n                    console.log('🏭 Found section with industries list');\n                    // Parse the content but mark it for special rendering\n                    sections.other.push({\n                        title: heading,\n                        content: this.parseInvestmentSectionWithIndustries(sectionContent),\n                        hasIndustries: true\n                    });\n                } else {\n                    console.log('📋 Adding to other sections:', heading);\n                    sections.other.push({\n                        title: heading,\n                        content: this.markdownToHtml(sectionContent.trim())\n                    });\n                }\n            }\n        }\n        \n        console.log('📊 Final sections summary:', {\n            mainContentLength: sections.mainContent.length,\n            personnelCount: sections.personnel.length,\n            servicesCount: sections.services.length,\n            otherSections: sections.other.map(s => s.title)\n        });\n        \n        return sections;\n    }\n\n    /**\n     * Parse services.md content with specialized handling\n     * @param {string} content - Services markdown content\n     * @returns {Object} Organized services sections\n     */\n    parseServicesContent(content) {\n        console.log('🛠️ Parsing specialized services content');\n        \n        const sections = {\n            mainContent: '',\n            servicesMainDescription: '',\n            coreValues: [],\n            serviceAreas: [],\n            other: []\n        };\n        \n        // Extract main description under \"### Forzak Will Do More for Your Business\"\n        const mainDescMatch = content.match(/### Forzak Will Do More for Your Business\\s*\\n\\n([^#]*?)(?=###|##|$)/s);\n        if (mainDescMatch) {\n            sections.servicesMainDescription = this.markdownToHtml(mainDescMatch[1].trim());\n            console.log('✅ Found main description:', sections.servicesMainDescription.substring(0, 100));\n        }\n        \n        // Extract core values sections (### headings that are value-related)\n        const coreValuesPattern = /### (Core Values|Creativity & Rigour|Relationship Driven|Objective Advice)\\s*\\n\\n((?:(?!###|##)[\\s\\S])*)/g;\n        let coreValuesMatch;\n        while ((coreValuesMatch = coreValuesPattern.exec(content)) !== null) {\n            const title = coreValuesMatch[1];\n            const content = coreValuesMatch[2].trim();\n            sections.coreValues.push({\n                title,\n                content: this.markdownToHtml(content)\n            });\n            console.log('✅ Found core value section:', title);\n        }\n        \n        // Extract all major service areas (## headings) with better parsing\n        // Split content by ## headings first, then process each section\n        const sectionParts = content.split(/^## /gm);\n        \n        for (let i = 1; i < sectionParts.length; i++) {\n            const sectionText = sectionParts[i];\n            const lines = sectionText.split('\\n');\n            const title = lines[0].trim();\n            const sectionContent = lines.slice(1).join('\\n').trim();\n            \n            // Skip the header-only sections\n            if (title === 'Market Leading Advisory Firm') {\n                continue;\n            }\n            \n            console.log(`📋 Processing service area: \"${title}\"`);\n            console.log(`📄 Raw content length: ${sectionContent.length}`);\n            console.log(`📄 Content preview: ${sectionContent.substring(0, 200)}...`);\n            \n            sections.serviceAreas.push({\n                title,\n                content: this.markdownToHtml(sectionContent),\n                rawContent: sectionContent  // Keep raw for subsection parsing\n            });\n            console.log('✅ Found service area:', title);\n        }\n        \n        console.log('🛠️ Services parsing complete:', {\n            mainDescriptionLength: sections.servicesMainDescription.length,\n            coreValuesCount: sections.coreValues.length,\n            serviceAreasCount: sections.serviceAreas.length\n        });\n        \n        return sections;\n    }\n\n    /**\n     * Parse personnel from a section\n     * @param {string} sectionContent - Personnel section content\n     * @returns {Array} Array of personnel objects\n     */\n    parsePersonnel(sectionContent) {\n        console.log('👥 Parsing personnel from content length:', sectionContent.length);\n        console.log('👥 Personnel content preview:', sectionContent.substring(0, 300));\n        const personnel = [];\n        \n        // Clean up any remaining backslash line continuations\n        const cleanContent = sectionContent.replace(/\\\\\\s*\\n/g, ' ').trim();\n        \n        // Split by **Name** pattern to identify personnel entries\n        const personnelEntries = cleanContent.split(/(?=\\*\\*[^*]+\\*\\*\\s*[–—-])/);\n        \n        console.log('👥 Found', personnelEntries.length, 'potential personnel entries');\n        \n        for (const entry of personnelEntries) {\n            if (!entry.trim() || !entry.includes('**')) continue;\n            \n            console.log('👤 Processing entry:', entry.substring(0, 150));\n            \n            // Extract name and title using regex\n            const nameMatch = entry.match(/\\*\\*([^*]+)\\*\\*\\s*[–—-]\\s*([^\\n]+)/);\n            if (!nameMatch) {\n                console.log('👤 No name/title match found');\n                continue;\n            }\n            \n            const name = nameMatch[1].trim();\n            const title = nameMatch[2].trim();\n            \n            // Extract bio - everything after the first line\n            const lines = entry.split('\\n');\n            const bioLines = lines.slice(1).filter(line => line.trim());\n            const bioText = bioLines.join('\\n').trim();\n            \n            console.log('👤 Extracted:', { \n                name, \n                title, \n                bioLength: bioText.length,\n                bioPreview: bioText.substring(0, 100)\n            });\n            \n            // Convert bio markdown to HTML\n            const bio = bioText ? this.markdownToHtml(bioText).replace(/<p><\\/p>/g, '').trim() : '';\n            \n            if (name && title) {\n                personnel.push({\n                    name,\n                    title,\n                    bio\n                });\n                console.log('✅ Added personnel:', { name, title, bioPreview: bio.substring(0, 50) });\n            }\n        }\n        \n        console.log('👥 Total personnel found:', personnel.length);\n        return personnel;\n    }\n\n    /**\n     * Parse services from a section\n     * @param {string} sectionContent - Services section content\n     * @returns {Array} Array of service objects\n     */\n    parseServices(sectionContent) {\n        const services = [];\n        \n        // Split by ### subsections\n        const serviceRegex = /^### (.+)$/gm;\n        const parts = sectionContent.split(serviceRegex);\n        \n        for (let i = 1; i < parts.length; i += 2) {\n            const title = parts[i];\n            const content = parts[i + 1] || '';\n            \n            services.push({\n                title: title.trim(),\n                content: this.markdownToHtml(content.trim())\n            });\n        }\n        \n        return services;\n    }\n\n    /**\n     * Parse investment section that contains industries list\n     * @param {string} sectionContent - Section content with industries\n     * @returns {string} HTML with industries as grid\n     */\n    parseInvestmentSectionWithIndustries(sectionContent) {\n        console.log('🏭 Parsing investment section with industries');\n        \n        // Split the content at the industries heading\n        const parts = sectionContent.split(/### Industries we have invested in:/i);\n        \n        if (parts.length < 2) {\n            // No industries list found, just return normal HTML\n            return this.markdownToHtml(sectionContent);\n        }\n        \n        // Parse the part before industries\n        let html = this.markdownToHtml(parts[0].trim());\n        \n        // Add the industries heading\n        html += '<h3 class=\"text-xl font-bold text-primary mb-6 font-heading\">Industries we have invested in:</h3>';\n        \n        // Extract industries from the list\n        const industriesPart = parts[1];\n        const industries = [];\n        const listRegex = /^[-*]\\s+(.+)$/gm;\n        let match;\n        \n        while ((match = listRegex.exec(industriesPart)) !== null) {\n            const industry = match[1].trim();\n            if (industry) {\n                industries.push(industry);\n            }\n        }\n        \n        // Generate grid HTML for industries\n        if (industries.length > 0) {\n            html += '<div class=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6\">';\n            industries.forEach(industry => {\n                html += `\n                    <div class=\"bg-white p-4 rounded-lg text-center shadow-sm hover:shadow-md transition-shadow\">\n                        <p class=\"text-sm text-neutral-800 font-body\">${this.escapeHtml(industry)}</p>\n                    </div>\n                `;\n            });\n            html += '</div>';\n        }\n        \n        // If there's content after the industries list, add it\n        const remainingContent = industriesPart.replace(listRegex, '').trim();\n        if (remainingContent) {\n            html += this.markdownToHtml(remainingContent);\n        }\n        \n        return html;\n    }\n\n    /**\n     * Extract industries from bullet lists\n     * @param {string} content - Full content\n     * @returns {Array} Array of industry names\n     */\n    extractIndustries(content) {\n        console.log('🏭 Extracting industries from content...');\n        const industries = [];\n        \n        // Look for the specific industries section\n        const industriesMatch = content.match(/### Industries we have invested in:\\s*((?:\\s*-\\s*.+\\s*)+)/i);\n        if (industriesMatch) {\n            console.log('🎯 Found industries section:', industriesMatch[1]);\n            const industriesList = industriesMatch[1];\n            const listRegex = /^[-*]\\s+(.+)$/gm;\n            let match;\n            \n            while ((match = listRegex.exec(industriesList)) !== null) {\n                const industry = match[1].trim();\n                if (industry) {\n                    industries.push(industry);\n                }\n            }\n            console.log('🏭 Extracted industries:', industries);\n            return industries;\n        }\n        \n        // Fallback: Find all bullet lists and use the longest one\n        console.log('⚠️ No specific industries section found, trying fallback...');\n        const listRegex = /^[-*]\\s+(.+)$/gm;\n        let match;\n        let currentList = [];\n        \n        while ((match = listRegex.exec(content)) !== null) {\n            currentList.push(match[1].trim());\n        }\n        \n        // If we have a long list (>10 items), treat as industries\n        if (currentList.length > 10) {\n            console.log('🏭 Using fallback industries list:', currentList);\n            return currentList;\n        }\n        \n        console.log('⚠️ No industries found');\n        return industries;\n    }\n}","// src/utils/modules/contentLoader-about.js\n// About page specific content loading functionality\n\nimport { ContentLoaderCore } from './contentLoader-core.js';\n\n/**\n * ContentLoaderAbout - Handles about page specific content loading and rendering\n * Extends ContentLoaderCore to access shared methods like markdownToHtml and escapeHtml\n */\nexport class ContentLoaderAbout extends ContentLoaderCore {\n    \n    /**\n     * Generate enhanced styled personnel cards\n     * @param {Array} personnel - Array of personnel objects\n     * @returns {string} HTML for personnel cards\n     */\n    generatePersonnelCards(personnel) {\n        if (personnel.length === 0) return '';\n        \n        let html = `\n            <h3 class=\"text-3xl font-bold text-primary mb-12 font-heading text-center\">Key Personnel</h3>\n            <div class=\"grid grid-cols-1 lg:grid-cols-1 gap-8\">\n        `;\n        // TODO: Personnel headshots may not be available - consider removing these photo placeholders entirely\n        personnel.forEach(person => {\n            html += `\n                <div class=\"personnel-card bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n                    <div class=\"grid grid-cols-1 lg:grid-cols-4 gap-6 items-start\">\n                        <!-- Photo Area -->\n                        <div class=\"lg:col-span-1\">\n                            <div class=\"w-32 h-32 mx-auto bg-gradient-to-br from-primary/10 to-secondary/10 rounded-full flex items-center justify-center\">\n                                <svg class=\"w-16 h-16 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>\n                                </svg>\n                            </div>\n                        </div>\n                        \n                        <!-- Info Area -->\n                        <div class=\"lg:col-span-3\">\n                            <h4 class=\"text-2xl font-bold text-primary mb-2 font-heading\">\n                                ${person.name === 'Sameer Alibhai' ? \n                                    `<a href=\"https://www.linkedin.com/in/sameer-alibhai-0b878321/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"hover:text-secondary transition-colors\">${this.escapeHtml(person.name)}</a>` : \n                                    this.escapeHtml(person.name)\n                                }\n                            </h4>\n                            <p class=\"text-xl text-accent-gold font-semibold mb-4 font-heading\">${this.escapeHtml(person.title)}</p>\n                            <div class=\"text-neutral-800 leading-relaxed font-body space-y-4\">${person.bio}</div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Generate styled services section\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for services section\n     */\n    generateServicesSection(sections) {\n        console.log('🛠️ Generating services section, available sections:', Object.keys(sections));\n        \n        // Find the services section in multiple possible locations\n        let servicesSection = sections.other.find(section => \n            section.title.toLowerCase().includes('services')\n        );\n        \n        // If not found in other, check if there's a services array\n        if (!servicesSection && sections.services && sections.services.length > 0) {\n            console.log('🛠️ Found services in sections.services array');\n            return this.generateServicesFromArray(sections.services);\n        }\n        \n        if (!servicesSection) {\n            console.warn('⚠️ No services section found');\n            return '';\n        }\n        \n        console.log('🛠️ Found services section:', servicesSection.title);\n        \n        let html = `\n            <h2 class=\"text-3xl font-bold text-primary mb-12 font-heading text-center\">Our Services</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        `;\n        \n        // Parse the services content to extract Consulting and Financial Investments\n        const content = servicesSection.content;\n        console.log('🛠️ Services content to parse:', content.substring(0, 200));\n        \n        // Split by h3 tags to get subsections\n        const serviceSections = content.split(/<h3[^>]*>/);\n        console.log('🛠️ Split into', serviceSections.length, 'service sections');\n        \n        for (let i = 1; i < serviceSections.length; i++) {\n            const section = serviceSections[i];\n            const titleMatch = section.match(/^([^<]+)</);\n            const title = titleMatch ? titleMatch[1].trim() : '';\n            \n            console.log('🛠️ Processing service section:', title);\n            \n            // Extract the list items more robustly\n            const listMatch = section.match(/<ul[^>]*>(.*?)<\\/ul>/s);\n            let listItems = '';\n            if (listMatch) {\n                listItems = listMatch[1];\n                console.log('🔍 Found list items for', title, ':', listItems);\n            } else {\n                console.log('❌ No list match found for', title);\n                console.log('🔍 Section content:', section.substring(0, 300));\n            }\n            \n            const formattedList = this.formatServiceList(listItems);\n            console.log('🎨 Formatted list for', title, ':', formattedList);\n            \n            // Create styled service category\n            html += `\n                <div class=\"service-category bg-white p-8 rounded-lg shadow-md\">\n                    <h3 class=\"text-2xl font-bold text-primary mb-6 font-heading\">${this.escapeHtml(title)}</h3>\n                    <ul class=\"custom-list\">\n                        ${formattedList}\n                    </ul>\n                </div>\n            `;\n        }\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Generate services from array format\n     * @param {Array} services - Array of service objects\n     * @returns {string} HTML for services\n     */\n    generateServicesFromArray(services) {\n        let html = `\n            <h2 class=\"text-3xl font-bold text-primary mb-12 font-heading text-center\">Our Services</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        `;\n        \n        services.forEach(service => {\n            console.log('🔧 Processing service from array:', service.title);\n            console.log('🔧 Service content:', service.content);\n            \n            // Extract bullet points from the content - handle both formats\n            let bullets = [];\n            \n            // First try to extract from existing HTML list structure\n            const listMatch = service.content.match(/<ul[^>]*class=\"custom-list\"[^>]*>(.*?)<\\/ul>/s);\n            if (listMatch) {\n                const listHTML = listMatch[1];\n                const liRegex = /<li[^>]*><span[^>]*class=\"custom-bullet\"[^>]*>▸<\\/span>(.*?)<\\/li>/g;\n                let match;\n                \n                while ((match = liRegex.exec(listHTML)) !== null) {\n                    bullets.push(match[1].trim());\n                }\n                console.log('🔧 Extracted bullets from HTML list for', service.title, ':', bullets);\n            }\n            \n            // Fallback: try to extract from paragraph format\n            if (bullets.length === 0) {\n                const bulletRegex = /<p>-\\s*(.+?)<\\/p>/g;\n                let match;\n                \n                while ((match = bulletRegex.exec(service.content)) !== null) {\n                    bullets.push(match[1].trim());\n                }\n                console.log('🔧 Extracted bullets from paragraphs for', service.title, ':', bullets);\n            }\n            \n            // Generate proper list items with arrow bullets\n            let listItems = '';\n            bullets.forEach(bullet => {\n                listItems += `<li><span class=\"custom-bullet\">▸</span>${this.escapeHtml(bullet)}</li>`;\n            });\n            \n            html += `\n                <div class=\"service-category bg-white p-8 rounded-lg shadow-md\">\n                    <h3 class=\"text-2xl font-bold text-primary mb-6 font-heading\">${this.escapeHtml(service.title)}</h3>\n                    <ul class=\"custom-list\">\n                        ${listItems}\n                    </ul>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Format service list items with proper styling\n     * @param {string} listItems - Raw list items HTML\n     * @returns {string} Formatted list items\n     */\n    formatServiceList(listItems) {\n        if (!listItems) {\n            console.log('⚠️ formatServiceList: No list items provided');\n            return '';\n        }\n        \n        console.log('🔧 formatServiceList input:', listItems);\n        \n        // Replace list items with proper blue arrow bullet styling\n        const formatted = listItems\n            .replace(/<li[^>]*>/g, '<li>')\n            .replace(/<li>/g, '<li><span class=\"custom-bullet\">▸</span>');\n            \n        console.log('🎨 formatServiceList output:', formatted);\n        return formatted;\n    }\n}\n\n// Create and export instance\nexport const contentLoaderAbout = new ContentLoaderAbout();","// src/utils/modules/contentLoader-services.js\n// Services-specific content loading functionality\n\nimport { ContentLoaderCore } from './contentLoader-core.js';\n\n/**\n * ContentLoaderServices class - handles services page specific content loading and parsing\n * Extends ContentLoaderCore to access shared functionality like markdownToHtml and escapeHtml\n */\nexport class ContentLoaderServices extends ContentLoaderCore {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Generate core values section from services content\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for core values section\n     */\n    generateCoreValuesSection(sections) {\n        console.log('💎 Generating core values section, available sections:', Object.keys(sections));\n        \n        // Use the specialized coreValues array if available\n        let coreValuesSections = [];\n        if (sections.coreValues && sections.coreValues.length > 0) {\n            coreValuesSections = sections.coreValues;\n            console.log('✅ Using specialized coreValues sections:', coreValuesSections.length);\n        } else {\n            // Fallback: Find core values and other value sections\n            coreValuesSections = sections.other.filter(section => \n                section.title.toLowerCase().includes('values') ||\n                section.title.toLowerCase().includes('creativity') ||\n                section.title.toLowerCase().includes('relationship') ||\n                section.title.toLowerCase().includes('objective')\n            );\n            console.log('🔄 Using fallback core values sections:', coreValuesSections.length);\n        }\n        \n        if (coreValuesSections.length === 0) {\n            console.warn('⚠️ No core values sections found');\n            return '';\n        }\n        \n        let html = `\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n        `;\n        \n        coreValuesSections.forEach((section, index) => {\n            const icons = [\n                `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>`,\n                `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>`,\n                `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>`,\n                `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>`\n            ];\n            \n            html += `\n                <div class=\"bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 text-center\">\n                    <div class=\"bg-primary/10 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                        <svg class=\"w-8 h-8 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            ${icons[index % icons.length]}\n                        </svg>\n                    </div>\n                    <h3 class=\"text-lg font-bold text-primary mb-3 font-heading\">${this.escapeHtml(section.title)}</h3>\n                    <div class=\"text-sm text-neutral-800 font-body text-left\">${section.content}</div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Generate services sections from services content\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for services sections\n     */\n    generateServicesSections(sections) {\n        console.log('🛠️ Generating services sections, available sections:', Object.keys(sections));\n        \n        // Use the specialized serviceAreas array if available\n        let serviceSections = [];\n        if (sections.serviceAreas && sections.serviceAreas.length > 0) {\n            serviceSections = sections.serviceAreas;\n            console.log('✅ Using specialized serviceAreas sections:', serviceSections.length);\n        } else {\n            // Fallback: Find major service sections (Management Consulting, Corporate Restructuring, etc.)\n            serviceSections = sections.other.filter(section => \n                section.title.toLowerCase().includes('management consulting') ||\n                section.title.toLowerCase().includes('corporate restructuring') ||\n                section.title.toLowerCase().includes('mergers') ||\n                section.title.toLowerCase().includes('strategic advisory') ||\n                section.title.toLowerCase().includes('sell side') ||\n                section.title.toLowerCase().includes('buy-side') ||\n                section.title.toLowerCase().includes('corporate structure')\n            );\n            console.log('🔄 Using fallback service sections:', serviceSections.length);\n        }\n        \n        if (serviceSections.length === 0) {\n            console.warn('⚠️ No service sections found');\n            return '';\n        }\n        \n        let html = '';\n        \n        serviceSections.forEach((section, index) => {\n            const isManagementConsulting = section.title.toLowerCase().includes('management consulting');\n            const isMergersAcquisitions = section.title.toLowerCase().includes('mergers');\n            \n            if (isManagementConsulting) {\n                // Special layout for Management Consulting with image and subsections\n                const rawContent = section.rawContent || '';\n                const mcSubsections = this.parseManagementConsultingSubsections(rawContent);\n                \n                console.log('🔍 Management Consulting - Raw content preview:', rawContent.substring(0, 500));\n                console.log('🔍 Management Consulting - Found subsections:', mcSubsections.length);\n                \n                html += `\n                    <div class=\"mb-12\">\n                        <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-start mb-8\">\n                            <div>\n                                <h3 class=\"text-3xl font-bold text-primary mb-6 font-heading\">${this.escapeHtml(section.title)}</h3>\n                                <div class=\"text-neutral-800 font-body\">${this.getManagementConsultingIntro(section.content)}</div>\n                                ${mcSubsections.length > 0 ? '<h2 class=\"text-2xl font-bold text-primary mt-20 font-heading\">Our services include:</h2>' : ''}\n                            </div>\n                            <div>\n                                <div class=\"aspect-[3/2] rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 group cursor-pointer\">\n                                    <img src=\"/assets/img/meeting.png\" \n                                         alt=\"Professional business consultation meeting - executive in dark suit gesturing during strategic discussion\" \n                                         class=\"w-full h-full object-cover object-center group-hover:scale-105 transition-transform duration-300\">\n                                </div>\n                            </div>\n                        </div>\n                `;\n                \n                // Add subsections if found\n                if (mcSubsections.length > 0) {\n                    html += `\n                        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n                    `;\n                    \n                    mcSubsections.forEach(subsection => {\n                        html += `\n                            <div class=\"bg-white p-8 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300\">\n                                <h4 class=\"text-xl font-bold text-primary mb-4 font-heading\">${this.escapeHtml(subsection.title)}</h4>\n                                <div class=\"text-neutral-800 font-body\">${subsection.content}</div>\n                            </div>\n                        `;\n                    });\n                    \n                    html += '</div>';\n                } else {\n                    console.warn('⚠️ No Management Consulting subsections found - debugging needed');\n                }\n                \n                html += '</div>';\n            } else if (isMergersAcquisitions) {\n                // Special 4-grid layout for M&A subsections\n                const maContent = section.content;\n                const rawContent = section.rawContent || '';\n                const subsections = this.parseMergersAcquisitionsSubsections(maContent, rawContent);\n                \n                html += `\n                    <div class=\"mb-12\">\n                        <h3 class=\"text-3xl font-bold text-primary mb-8 text-center font-heading\">${this.escapeHtml(section.title)}</h3>\n                        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                `;\n                \n                subsections.forEach(subsection => {\n                    html += `\n                        <div class=\"bg-white p-8 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300\">\n                            <h4 class=\"text-xl font-bold text-primary mb-4 font-heading\">${this.escapeHtml(subsection.title)}</h4>\n                            <div class=\"text-neutral-800 font-body\">${subsection.content}</div>\n                        </div>\n                    `;\n                });\n                \n                html += '</div></div>';\n            } else if (section.title.toLowerCase().includes('risk management')) {\n                // Special layout for Risk Management with vertical image\n                html += `\n                    <div class=\"mb-8\">\n                        <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                            <div class=\"lg:col-span-2 bg-white p-8 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300\">\n                                <h3 class=\"text-3xl font-bold text-primary mb-6 font-heading\">${this.escapeHtml(section.title)}</h3>\n                                <div class=\"text-neutral-800 font-body\">${section.content}</div>\n                            </div>\n                            <div class=\"lg:col-span-1\">\n                                <div class=\"aspect-[2/3] rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300\">\n                                    <img src=\"/assets/img/graphs.png\" \n                                         alt=\"Risk management analytics with graphs and charts showing financial data and performance metrics\" \n                                         class=\"w-full h-full object-cover object-center\">\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            } else {\n                // Regular service section layout (Corporate Restructuring)\n                html += `\n                    <div class=\"mb-8\">\n                        <div class=\"bg-white p-8 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300\">\n                            <h3 class=\"text-3xl font-bold text-primary mb-6 font-heading\">${this.escapeHtml(section.title)}</h3>\n                            <div class=\"text-neutral-800 font-body\">${section.content}</div>\n                        </div>\n                    </div>\n                `;\n            }\n        });\n        \n        return html;\n    }\n\n    /**\n     * Parse Management Consulting subsections (Operating Strategy, Competitive Strategy)\n     * @param {string} rawContent - Raw markdown content\n     * @returns {Array} Array of subsection objects\n     */\n    parseManagementConsultingSubsections(rawContent) {\n        const subsections = [];\n        \n        console.log('🔍 MC Parsing - Full raw content LENGTH:', rawContent.length);\n        console.log('🔍 MC Parsing - Full raw content:', rawContent);\n        console.log('🔍 Raw content contains \"Competitive Strategy\"?', rawContent.includes('Competitive Strategy'));\n        console.log('🔍 Raw content contains \"#### Competitive Strategy\"?', rawContent.includes('#### Competitive Strategy'));\n        \n        // Look for \"### Our services include:\" and extract everything after it\n        // Since rawContent only contains Management Consulting section, we extract to the end\n        const startMarker = \"### Our services include:\";\n        const startIndex = rawContent.indexOf(startMarker);\n        \n        console.log('🔍 Looking for start marker at index:', startIndex);\n        \n        if (startIndex === -1) {\n            console.log('⚠️ No \"Our services include:\" section found');\n            return subsections;\n        }\n        \n        // Extract content from marker to end of Management Consulting section\n        const servicesContent = rawContent.substring(startIndex + startMarker.length).trim();\n        console.log('🔍 Extracted content length:', servicesContent.length);\n        console.log('🔍 Does extracted content include Competitive Strategy?', servicesContent.includes('#### Competitive Strategy'));\n        console.log('📋 Found services include section LENGTH:', servicesContent.length);\n        console.log('📋 Found services include section FULL CONTENT:', servicesContent);\n        console.log('📋 Does it contain \"Competitive Strategy\"?', servicesContent.includes('Competitive Strategy'));\n        console.log('📋 Does it contain \"#### Competitive Strategy\"?', servicesContent.includes('#### Competitive Strategy'));\n        \n        // Split by #### to get individual subsections (more reliable than regex)\n        const sections = servicesContent.split('#### ');\n        console.log(`🔍 Split into ${sections.length} parts`);\n        console.log('🔍 All split parts:', sections);\n        \n        // Process each section (skip first empty part)\n        for (let i = 1; i < sections.length; i++) {\n            const section = sections[i].trim();\n            if (!section) continue;\n            \n            // Extract title (first line) and content (rest)\n            const lines = section.split('\\n');\n            const title = lines[0].trim();\n            const sectionContent = lines.slice(1).join('\\n').trim();\n            \n            console.log(`🎯 Found MC subsection: \"${title}\"`);\n            console.log(`📄 Subsection content: ${sectionContent.substring(0, 100)}...`);\n            \n            if (title && sectionContent) {\n                subsections.push({\n                    title,\n                    content: this.markdownToHtml(sectionContent)\n                });\n            }\n        }\n        \n        console.log(`📊 Total MC subsections found: ${subsections.length}`);\n        subsections.forEach((sub, i) => {\n            console.log(`📋 Subsection ${i + 1}: ${sub.title}`);\n        });\n        \n        return subsections;\n    }\n\n    /**\n     * Extract the intro paragraph from Management Consulting content\n     * @param {string} content - HTML content\n     * @returns {string} Intro paragraph HTML\n     */\n    getManagementConsultingIntro(content) {\n        // Extract the first paragraph (before any lists or subsections)\n        const firstParagraphMatch = content.match(/<p[^>]*>(.*?)<\\/p>/);\n        if (firstParagraphMatch) {\n            return firstParagraphMatch[0];\n        }\n        return content;\n    }\n\n    /**\n     * Parse M&A content into subsections for 4-grid layout\n     * @param {string} content - M&A section content\n     * @param {string} rawContent - Raw markdown content before HTML conversion\n     * @returns {Array} Array of subsection objects\n     */\n    parseMergersAcquisitionsSubsections(content, rawContent) {\n        const subsections = [];\n        \n        console.log('🔍 Parsing M&A subsections from raw content:', rawContent.substring(0, 300));\n        \n        // Parse markdown headings (### subsections) from raw content\n        const headingPattern = /^### (.+?)\\s*\\n([\\s\\S]*?)(?=^###|^##|$)/gm;\n        let match;\n        \n        while ((match = headingPattern.exec(rawContent)) !== null) {\n            const title = match[1].trim();\n            const sectionContent = match[2].trim();\n            \n            console.log(`🎯 Found M&A subsection: \"${title}\"`);\n            console.log(`📄 Subsection content length: ${sectionContent.length}`);\n            \n            if (title && sectionContent) {\n                subsections.push({\n                    title,\n                    content: this.markdownToHtml(sectionContent)\n                });\n            }\n        }\n        \n        console.log(`📊 Total M&A subsections found: ${subsections.length}`);\n        \n        // If no subsections found, create a single section\n        if (subsections.length === 0) {\n            console.log('⚠️ No M&A subsections found, using fallback');\n            subsections.push({\n                title: 'Our Approach',\n                content: content\n            });\n        }\n        \n        return subsections;\n    }\n}","// src/utils/modules/contentLoader-investments.js\n// Investment-specific content loading functionality\n\nimport { ContentLoaderCore } from './contentLoader-core.js';\n\n/**\n * ContentLoaderInvestments class\n * Handles content loading and generation for investments-related pages\n * Extends ContentLoaderCore to access core functionality like markdownToHtml and escapeHtml\n */\nexport class ContentLoaderInvestments extends ContentLoaderCore {\n    /**\n     * Generate investment sections for investments page\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for investment sections\n     */\n    generateInvestmentSections(sections) {\n        console.log('📋 Generating investment sections, available sections:', Object.keys(sections));\n        console.log('📋 Sections to render:', sections.other.map(s => ({ title: s.title, hasIndustries: s.hasIndustries })));\n        \n        // Display all sections in order\n        if (sections.other.length === 0) {\n            console.warn('⚠️ No sections found');\n            return '';\n        }\n        \n        let html = '<div class=\"space-y-12\">';\n        \n        // Find the indices of the three special sections that need the glass image\n        const backingIndex = sections.other.findIndex(s => s.title.toLowerCase().includes('backing'));\n        const invitationIndex = sections.other.findIndex(s => s.title.toLowerCase().includes('personal invitation'));\n        const financingIndex = sections.other.findIndex(s => s.title.toLowerCase().includes('financing needs'));\n        \n        // Determine if we need to create a special layout for the last three sections\n        const hasSpecialSections = backingIndex !== -1 && invitationIndex !== -1 && financingIndex !== -1;\n        const specialSectionIndices = hasSpecialSections ? [backingIndex, invitationIndex, financingIndex].sort((a, b) => a - b) : [];\n        \n        sections.other.forEach((section, index) => {\n            const bgClass = index % 2 === 0 ? 'bg-white' : 'bg-neutral-50';\n            \n            // Check if this section has special rendering (like industries grid)\n            if (section.hasIndustries) {\n                console.log('🏭 Rendering section with industries grid:', section.title);\n                html += `\n                    <div class=\"${bgClass} rounded-lg p-8\">\n                        <h2 class=\"text-2xl font-bold text-primary mb-4 font-heading\">${this.escapeHtml(section.title)}</h2>\n                        <div class=\"text-neutral-800 font-body\">\n                            ${section.content}\n                        </div>\n                    </div>\n                `;\n            } else if (hasSpecialSections && index === specialSectionIndices[0]) {\n                // Start special layout for the three sections with vertical images\n                console.log('🥽 Starting special layout with vertical images for sections:', specialSectionIndices);\n                \n                // Generate the special sections with images layout\n                html += this.generateSpecialSectionsWithImages(sections, specialSectionIndices);\n            } else if (!hasSpecialSections || !specialSectionIndices.includes(index)) {\n                // Regular section layout (skip if this section is part of the special group)\n                html += `\n                    <div class=\"${bgClass} rounded-lg p-8\">\n                        <h2 class=\"text-2xl font-bold text-primary mb-4 font-heading\">${this.escapeHtml(section.title)}</h2>\n                        <div class=\"text-neutral-800 font-body\">\n                            ${section.content}\n                        </div>\n                    </div>\n                `;\n            }\n            // Skip rendering individual sections that are part of the special group (already rendered above)\n        });\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Generate special sections layout with vertical images\n     * @param {Object} sections - Parsed sections object  \n     * @param {Array} specialSectionIndices - Indices of sections to render with images\n     * @returns {string} HTML for special sections with images\n     */\n    generateSpecialSectionsWithImages(sections, specialSectionIndices) {\n        // Configuration for vertical images - easily add/remove images here\n        const verticalImagesConfig = [\n            {\n                filename: 'glass.png',\n                alt: 'Financial analysis with magnifying glass over charts and graphs showing investment opportunities and market data'\n            },\n            {\n                filename: 'pen.png', \n                alt: 'Professional business pen and documents representing contract signing and deal closure'\n            },\n            {\n                filename: 'suit.png',\n                alt: 'Professional business attire representing expertise and trustworthiness'\n            }\n        ];\n        \n        // For now, we'll assume all configured images exist\n        // In a real implementation, you could check file existence\n        const availableImages = verticalImagesConfig.filter(img => {\n            // Simple check - only include glass.png and pen.png for now since suit.png doesn't exist yet\n            return img.filename === 'glass.png' || img.filename === 'pen.png' || img.filename === 'suit.png';\n        });\n        \n        console.log('🖼️ Available vertical images:', availableImages.map(img => img.filename));\n        \n        // Keep consistent grid layout: content always takes 3 columns, images always take 1 column\n        // Images just stack vertically within that 1 column\n        let html = `\n            <div class=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n                <div class=\"lg:col-span-3 space-y-8\">\n        `;\n        \n        // Render all special sections\n        specialSectionIndices.forEach((specialIndex, i) => {\n            const specialSection = sections.other[specialIndex];\n            const specialBgClass = specialIndex % 2 === 0 ? 'bg-white' : 'bg-neutral-50';\n            \n            // Handle special formatting for the \"Backing\" title to split it across two lines\n            let formattedTitle = this.escapeHtml(specialSection.title);\n            if (specialSection.title.toLowerCase().includes('backing') && specialSection.title.includes('–')) {\n                // Replace \"– \" with \"–<br>\" to break the line after the dash\n                formattedTitle = formattedTitle.replace('–&nbsp;', '–<br>').replace('– ', '–<br>');\n            }\n            \n            html += `\n                <div class=\"${specialBgClass} rounded-lg p-8 shadow-sm hover:shadow-md transition-shadow duration-300\">\n                    <h2 class=\"text-2xl font-bold text-primary mb-4 font-heading\">${formattedTitle}</h2>\n                    <div class=\"text-neutral-800 font-body\">\n                        ${specialSection.content}\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += `\n                </div>\n                <div class=\"lg:col-span-1\">\n                    <div class=\"sticky top-24 space-y-6\">\n        `;\n        \n        // Render available images\n        availableImages.forEach((imageConfig, index) => {\n            html += `\n                <div class=\"aspect-[2/3] rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300\">\n                    <img src=\"/assets/img/${imageConfig.filename}\" \n                         alt=\"${imageConfig.alt}\" \n                         class=\"w-full h-full object-cover object-center\">\n                </div>\n            `;\n        });\n        \n        html += `\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        return html;\n    }\n\n    /**\n     * Generate investment services section from investments content\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for investment services section\n     */\n    generateInvestmentServicesSection(sections) {\n        console.log('💼 Generating investment services section, available sections:', Object.keys(sections));\n        console.log('📋 Other sections available:', sections.other.map(s => s.title));\n        \n        // Find investment service sections from investment-solutions.md\n        const investmentSections = sections.other.filter(section => {\n            const title = section.title.toLowerCase();\n            return title === 'private equity' ||\n                   title === 'private placements' ||\n                   title === 'management buyouts' ||\n                   title === 'financial restructuring' ||\n                   title === 'debtor-in-possession financing' ||\n                   title === 'real estate development financing' ||\n                   title.includes('asset based financing');\n        });\n        \n        console.log('✅ Found investment sections:', investmentSections.map(s => s.title));\n        \n        if (investmentSections.length === 0) {\n            console.warn('⚠️ No investment service sections found');\n            return '';\n        }\n        \n        let html = `\n            <h2 class=\"text-3xl font-bold text-primary text-center mb-12 font-heading\">\n                Our Investment Services\n            </h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        `;\n        \n        const icons = [\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\"></path>`,\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h4M9 7h6m-6 4h6m-6 4h6\"></path>`,\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>`,\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>`,\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>`,\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h4M9 7h6m-6 4h6m-6 4h6\"></path>`\n        ];\n        \n        investmentSections.forEach((section, index) => {\n            html += `\n                <div class=\"bg-white p-8 rounded-lg shadow-sm\">\n                    <div class=\"bg-primary/10 rounded-full w-16 h-16 flex items-center justify-center mb-6\">\n                        <svg class=\"w-8 h-8 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            ${icons[index % icons.length]}\n                        </svg>\n                    </div>\n                    <h3 class=\"text-xl font-bold text-primary mb-4 font-heading\">${this.escapeHtml(section.title)}</h3>\n                    <div class=\"text-neutral-800 font-body\">${section.content}</div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Generate styled industry cards\n     * @param {Array} industries - Array of industry names\n     * @returns {string} HTML for industry grid\n     */\n    generateIndustryCards(industries) {\n        let html = '';\n        \n        industries.forEach(industry => {\n            html += `\n                <div class=\"bg-white p-4 rounded-lg text-center shadow-sm hover:shadow-md transition-shadow\">\n                    <p class=\"text-sm text-neutral-800 font-body\">${this.escapeHtml(industry)}</p>\n                </div>\n            `;\n        });\n        \n        return html;\n    }\n\n    /**\n     * Generate financial products section from investments content\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for financial products section\n     */\n    generateFinancialProductsSection(sections) {\n        console.log('💳 Generating financial products section, available sections:', Object.keys(sections));\n        \n        // Don't render any specific section here to avoid duplication\n        // The financial products content should be part of the main sections flow\n        console.log('💳 Skipping financial products section to avoid duplication');\n        return '';\n    }\n}\n\n// Create and export instance\nexport const contentLoaderInvestments = new ContentLoaderInvestments();","/**\n * @fileoverview ContentLoader Solutions Module\n * Specialized content loading methods for the investment solutions page.\n * \n * This module contains methods specific to handling investment solutions content,\n * including generating investment solutions grids and specialized financing services.\n * \n * @author Forzak LLC Development Team\n * @version 1.0.0\n */\n\nimport { ContentLoaderCore } from './contentLoader-core.js';\n\n/**\n * ContentLoaderSolutions class extends ContentLoaderCore to add investment solutions specific functionality\n * @extends ContentLoaderCore\n */\nexport class ContentLoaderSolutions extends ContentLoaderCore {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Generate investment solutions grid for the investment-solutions page\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for investment solutions grid\n     */\n    generateInvestmentSolutionsGrid(sections) {\n        console.log('💎 Generating investment solutions grid, available sections:', Object.keys(sections));\n        console.log('📋 All sections.other:', sections.other.map(s => s.title));\n        \n        // For investment-solutions.md, get only the first 4 core services for cards\n        const coreServices = ['private equity', 'private placements', 'management buyouts', 'financial restructuring'];\n        const investmentServices = sections.other.filter(section => {\n            const title = section.title.toLowerCase();\n            // Skip the intro section and only include core services\n            return title !== 'tailored financial solutions for your business' && \n                   section.title !== '' && // Skip empty titles\n                   coreServices.some(service => title.includes(service));\n        });\n        \n        console.log('✅ Found core investment services for cards:', investmentServices.map(s => s.title));\n        \n        if (investmentServices.length === 0) {\n            console.warn('⚠️ No investment services found');\n            return '';\n        }\n        \n        let html = `\n            <h2 class=\"text-3xl font-bold text-primary text-center mb-12 font-heading\">\n                Our Core Investment Solutions\n            </h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        `;\n        \n        const icons = [\n            // Private Equity - growth chart\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\"></path>`,\n            // Private Placements - document\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>`,\n            // Management Buyouts - people\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>`,\n            // Financial Restructuring - refresh\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>`,\n            // DIP Financing - shield\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"></path>`,\n            // Real Estate - office building\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>`,\n            // Asset Based - briefcase\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"></path>`\n        ];\n        \n        investmentServices.forEach((service, index) => {\n            // Extract first 1-2 sentences as summary for cleaner card display\n            const firstParagraphMatch = service.content.match(/<p[^>]*>(.*?)<\\/p>/);\n            let summary = '';\n            if (firstParagraphMatch) {\n                const fullText = firstParagraphMatch[1];\n                // Extract first 1-2 sentences (ending with period, exclamation, or question mark)\n                const sentences = fullText.match(/[^.!?]+[.!?]+/g) || [];\n                const firstTwoSentences = sentences.slice(0, 2).join(' ');\n                summary = `<p class=\"text-neutral-800 mb-4 font-body leading-relaxed text-lg\">${firstTwoSentences}</p>`;\n            } else {\n                summary = service.content;\n            }\n            \n            html += `\n                <div class=\"bg-white p-8 rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                    <div class=\"flex items-start mb-6\">\n                        <div class=\"bg-primary/10 rounded-full w-16 h-16 flex items-center justify-center flex-shrink-0\">\n                            <svg class=\"w-8 h-8 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                ${icons[index % icons.length]}\n                            </svg>\n                        </div>\n                        <div class=\"ml-6 flex-1\">\n                            <h3 class=\"text-2xl font-bold text-primary mb-4 font-heading\">${this.escapeHtml(service.title)}</h3>\n                            <div class=\"text-neutral-800 font-body\">\n                                ${summary}\n                                <a href=\"#${service.title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}\" \n                                   class=\"inline-block mt-4 text-secondary hover:text-primary font-semibold transition-colors smooth-scroll\">\n                                    Learn More →\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        \n        // Add detailed sections below the grid for core services only\n        html += '<div class=\"mt-16 space-y-16\">';\n        \n        investmentServices.forEach((service, index) => {\n            const anchorId = service.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n            html += `\n                <div id=\"${anchorId}\" class=\"scroll-mt-24\">\n                    <div class=\"bg-white rounded-lg shadow-md p-8\">\n                        <div class=\"flex items-center mb-6\">\n                            <div class=\"bg-primary/10 rounded-full w-12 h-12 flex items-center justify-center mr-4\">\n                                <svg class=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    ${icons[index % icons.length]}\n                                </svg>\n                            </div>\n                            <h3 class=\"text-2xl font-bold text-primary font-heading\">${this.escapeHtml(service.title)}</h3>\n                        </div>\n                        <div class=\"text-neutral-800 font-body\">\n                            ${service.content}\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        \n        return html;\n    }\n\n    /**\n     * Generate specialized financing services section for investment solutions page\n     * @param {Object} sections - Parsed sections object\n     * @returns {string} HTML for specialized financing services\n     */\n    generateSpecializedFinancingServices(sections) {\n        console.log('💼 Generating specialized financing services, available sections:', Object.keys(sections));\n        console.log('📋 All sections.other:', sections.other.map(s => s.title));\n        \n        // Get the specialized financing services (last 3 services)\n        const specializedServices = ['debtor-in-possession financing', 'real estate development financing', 'asset based financing'];\n        const financingServices = sections.other.filter(section => {\n            const title = section.title.toLowerCase();\n            return specializedServices.some(service => title.includes(service) || \n                   (service === 'asset based financing' && title.includes('when you need more than a bank')));\n        });\n        \n        console.log('✅ Found specialized financing services:', financingServices.map(s => s.title));\n        \n        if (financingServices.length === 0) {\n            console.warn('⚠️ No specialized financing services found');\n            return '';\n        }\n        \n        let html = `\n            <h2 class=\"text-3xl font-bold text-primary text-center mb-12 font-heading\">\n                Specialized Financing Services\n            </h2>\n            <div class=\"space-y-12\">\n        `;\n        \n        // Icons for specialized services\n        const specializedIcons = [\n            // DIP Financing - shield/protection\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\"></path>`,\n            // Real Estate - building\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>`,\n            // Asset Based - vault/safe\n            `<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>`\n        ];\n        \n        financingServices.forEach((service, index) => {\n            const bgClass = index % 2 === 0 ? 'bg-white' : 'bg-neutral-50';\n            \n            html += `\n                <div class=\"${bgClass} rounded-lg shadow-md p-8 md:p-12 transition-all duration-300 hover:shadow-xl hover:scale-[1.02] group cursor-pointer\">\n                    <div class=\"flex items-start mb-6\">\n                        <div class=\"bg-primary/10 rounded-full w-14 h-14 flex items-center justify-center flex-shrink-0 mr-4 transition-colors duration-300 group-hover:bg-primary/20\">\n                            <svg class=\"w-7 h-7 text-primary transition-transform duration-300 group-hover:scale-110\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                ${specializedIcons[index % specializedIcons.length]}\n                            </svg>\n                        </div>\n                        <h3 class=\"text-2xl font-bold text-primary font-heading\">${this.escapeHtml(service.title)}</h3>\n                    </div>\n                    <div class=\"text-neutral-800 font-body\">\n                        ${service.content}\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n        return html;\n    }\n}\n\n// Create and export an instance\nexport const contentLoaderSolutions = new ContentLoaderSolutions();","// Content loader utility for dynamic markdown content\n// This is the main ContentLoader class that composes all modular functionality\n\nimport { ContentLoaderCore } from './modules/contentLoader-core.js';\nimport { ContentLoaderShared } from './modules/contentLoader-shared.js';\nimport { ContentLoaderAbout } from './modules/contentLoader-about.js';\nimport { ContentLoaderServices } from './modules/contentLoader-services.js';\nimport { ContentLoaderInvestments } from './modules/contentLoader-investments.js';\nimport { ContentLoaderSolutions } from './modules/contentLoader-solutions.js';\n\n/**\n * Main ContentLoader class that composes all page-specific loaders\n * Uses composition pattern to combine functionality from different modules\n */\nexport class ContentLoader {\n    constructor() {\n        // Initialize all module instances\n        this.core = new ContentLoaderCore();\n        this.shared = new ContentLoaderShared();\n        this.about = new ContentLoaderAbout();\n        this.services = new ContentLoaderServices();\n        this.investments = new ContentLoaderInvestments();\n        this.solutions = new ContentLoaderSolutions();\n        \n        // Bind core methods directly to this instance for backward compatibility\n        this.cache = this.core.cache;\n        // loadContent is overridden below to coordinate parsing\n        this.parseMarkdown = this.core.parseMarkdown.bind(this.core);\n        this.parseFrontmatter = this.core.parseFrontmatter.bind(this.core);\n        this.markdownToHtml = this.core.markdownToHtml.bind(this.core);\n        this.applyContentStyling = this.core.applyContentStyling.bind(this.core);\n        this.escapeHtml = this.core.escapeHtml.bind(this.core);\n        this.renderContent = this.core.renderContent.bind(this.core);\n        this.showLoading = this.core.showLoading.bind(this.core);\n        this.showError = this.core.showError.bind(this.core);\n        \n        // Bind shared methods\n        this.parseContentSections = this.shared.parseContentSections.bind(this.shared);\n        this.parseServicesContent = this.shared.parseServicesContent.bind(this.shared);\n        this.parsePersonnel = this.shared.parsePersonnel.bind(this.shared);\n        this.parseServices = this.shared.parseServices.bind(this.shared);\n        this.parseInvestmentSectionWithIndustries = this.shared.parseInvestmentSectionWithIndustries.bind(this.shared);\n        this.extractIndustries = this.shared.extractIndustries.bind(this.shared);\n        \n        // Bind about page methods\n        this.generatePersonnelCards = this.about.generatePersonnelCards.bind(this.about);\n        this.generateServicesSection = this.about.generateServicesSection.bind(this.about);\n        this.generateServicesFromArray = this.about.generateServicesFromArray.bind(this.about);\n        this.formatServiceList = this.about.formatServiceList.bind(this.about);\n        \n        // Bind services page methods\n        this.generateCoreValuesSection = this.services.generateCoreValuesSection.bind(this.services);\n        this.generateServicesSections = this.services.generateServicesSections.bind(this.services);\n        this.parseManagementConsultingSubsections = this.services.parseManagementConsultingSubsections.bind(this.services);\n        this.getManagementConsultingIntro = this.services.getManagementConsultingIntro.bind(this.services);\n        this.parseMergersAcquisitionsSubsections = this.services.parseMergersAcquisitionsSubsections.bind(this.services);\n        \n        // Bind investments page methods\n        this.generateInvestmentSections = this.investments.generateInvestmentSections.bind(this.investments);\n        this.generateSpecialSectionsWithImages = this.investments.generateSpecialSectionsWithImages.bind(this.investments);\n        this.generateInvestmentServicesSection = this.investments.generateInvestmentServicesSection.bind(this.investments);\n        this.generateIndustryCards = this.investments.generateIndustryCards.bind(this.investments);\n        this.generateFinancialProductsSection = this.investments.generateFinancialProductsSection.bind(this.investments);\n        \n        // Bind investment solutions page methods\n        this.generateInvestmentSolutionsGrid = this.solutions.generateInvestmentSolutionsGrid.bind(this.solutions);\n        this.generateSpecializedFinancingServices = this.solutions.generateSpecializedFinancingServices.bind(this.solutions);\n        \n        // Additional deprecated/unused methods for backward compatibility\n        this.parseInvestments = this.parseInvestments.bind(this);\n    }\n    \n    /**\n     * Override loadContent to coordinate between core and shared modules\n     * @param {string} contentName - Name of the content file (without .md extension)\n     * @returns {Promise<Object>} Parsed content with frontmatter, sections, and HTML\n     */\n    async loadContent(contentName) {\n        // Check cache first\n        if (this.cache.has(contentName)) {\n            return this.cache.get(contentName);\n        }\n\n        try {\n            // Use core's loadContent to get basic parsing (frontmatter + rawContent)\n            const basicParsed = await this.core.loadContent(contentName);\n            \n            // Now parse the content into sections using shared module\n            const sections = this.shared.parseContentSections(basicParsed.rawContent);\n            \n            // Combine everything into the full parsed result\n            const fullParsed = {\n                frontmatter: basicParsed.frontmatter,\n                sections: sections,\n                rawContent: basicParsed.rawContent\n            };\n            \n            // Cache the full result\n            this.cache.set(contentName, fullParsed);\n            console.log(`💾 Full content cached for: ${contentName}`);\n            \n            return fullParsed;\n        } catch (error) {\n            console.error(`❌ Failed to load content: ${contentName}`, error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Parse investments content (deprecated - kept for compatibility)\n     * @param {string} htmlContent - HTML content from markdown\n     * @returns {Object} Organized investments data\n     */\n    parseInvestments(htmlContent) {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = htmlContent;\n        \n        const investments = {\n            sections: [],\n            industries: []\n        };\n        \n        // Find the industries list\n        const lists = tempDiv.querySelectorAll('ul');\n        lists.forEach(list => {\n            const items = list.querySelectorAll('li');\n            if (items.length > 10) { // Assume this is the industries list\n                items.forEach(item => {\n                    investments.industries.push(item.textContent.trim());\n                });\n            }\n        });\n        \n        // Find main sections\n        const headings = tempDiv.querySelectorAll('h2');\n        headings.forEach(heading => {\n            const title = heading.textContent.trim();\n            let content = '';\n            \n            // Get content until next h2\n            let nextElement = heading.nextElementSibling;\n            while (nextElement && nextElement.tagName !== 'H2') {\n                content += nextElement.outerHTML;\n                nextElement = nextElement.nextElementSibling;\n            }\n            \n            investments.sections.push({\n                title,\n                content\n            });\n        });\n        \n        return investments;\n    }\n}\n\n// Create global instance\nexport const contentLoader = new ContentLoader();"],"names":["ContentLoaderCore","contentName","_a","fetchUrl","response","markdownText","parsed","error","frontmatterRegex","match","frontmatter","content","frontmatterText","altRegex","altMatch","line","colonIndex","key","value","markdown","sections","html","section","trimmedSection","listItems","processedSection","htmlContent","text","div","container","message","ContentLoaderShared","sectionRegex","parts","part","index","cleanedContent","startIndex","i","heading","sectionContent","s","mainDescMatch","coreValuesPattern","coreValuesMatch","title","sectionParts","lines","personnel","personnelEntries","entry","nameMatch","name","bioText","bio","services","serviceRegex","industriesPart","industries","listRegex","industry","remainingContent","industriesMatch","industriesList","currentList","ContentLoaderAbout","person","servicesSection","serviceSections","titleMatch","listMatch","formattedList","service","bullets","listHTML","liRegex","bulletRegex","bullet","formatted","ContentLoaderServices","coreValuesSections","icons","isManagementConsulting","isMergersAcquisitions","rawContent","mcSubsections","subsection","maContent","subsections","startMarker","servicesContent","sub","firstParagraphMatch","headingPattern","ContentLoaderInvestments","backingIndex","invitationIndex","financingIndex","hasSpecialSections","specialSectionIndices","a","b","bgClass","availableImages","img","specialIndex","specialSection","specialBgClass","formattedTitle","imageConfig","investmentSections","ContentLoaderSolutions","coreServices","investmentServices","summary","anchorId","specializedServices","financingServices","specializedIcons","ContentLoader","basicParsed","fullParsed","tempDiv","investments","list","items","item","nextElement","contentLoader"],"mappings":"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"}